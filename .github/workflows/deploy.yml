name: Build and Deploy Spring Boot to AWS EC2

on:
  push:
    branches: [ main ]
    
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: auction-deploy
  CODE_DEPLOY_APPLICATION_NAME: getReadyAuction
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: getreadyauction-deploy
  
permissions:
  contents: read

jobs:
 deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Java JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: '17'
        
    - name: Copy Secret
      env:
          OCCUPY_SECRET: ${{ secrets.OCCUPY_SECRET }}
          OCCUPY_SECRET_DIR: src/main/resources
          OCCUPY_SECRET_TEST_DIR: src/test/resources
          OCCUPY_SECRET_DIR_FILE_NAME: application.properties
      run: echo $OCCUPY_SECRET | base64 --decode > $OCCUPY_SECRET_DIR/$OCCUPY_SECRET_DIR_FILE_NAME && 
           echo $OCCUPY_SECRET | base64 --decode > $OCCUPY_SECRET_TEST_DIR/$OCCUPY_SECRET_DIR_FILE_NAME
        
    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew 
        
    - name: Build with Gradle
      uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
      with:
        arguments: clean build -x test
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/GetReadyAuction.zip \
          --source .
      
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,key=GetReadyAuction.zip,bundleType=zip
